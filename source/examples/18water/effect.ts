/**
 * Project: html5-typescript-canvas
 * File: effect.ts
 * Author: Patrik Sporre
 * License: MIT
 * Description:
 *   Implements a dynamic water ripple effect over a bitmap image. Ripples are
 *   generated by a moving source that follows a Lissajous curve, and wave propagation
 *   is simulated using a height map and damping. The effect distorts the image in real-time
 *   to mimic the appearance of water ripples.
 */

import { Blitter } from "../../engine/blitter.js";              // Blitter class for managing canvas operations
import { BitmapImage } from "../../engine/utils/bitmap/bitmapimage.js";
import { LissajousCurve } from "../../engine/utils/path/lissajous.js";

let width: number;          // Screen width in pixels
let height: number;         // Screen height in pixels

const image: BitmapImage = new BitmapImage(); // Bitmap image to render

let currentHeightMap: Float32Array; // Stores the current height map values for wave propagation
let previousHeightMap: Float32Array; // Stores the previous height map values for wave propagation

let damping: number = 0.99; // Controls the rate of wave dissipation

let ripple: LissajousCurve; // Represents the moving ripple source

/**
 * Initializes the water ripple effect.
 * 
 * Prepares the canvas, loads the bitmap image, initializes the height maps,
 * and configures the Lissajous curve for the ripple source.
 * 
 * @param {Blitter} [blitter] - Optional instance of the Blitter class for managing canvas operations.
 */
export async function initialize(blitter?: Blitter) {
    console.log('18water | einstein in the pond');

    // Get canvas dimensions
    width = blitter?.clipping.maxX!;    // Maximum x-coordinate for clipping
    height = blitter?.clipping.maxY!;   // Maximum y-coordinate for clipping

    // Load the bitmap image
    image.load("../../../images/einstein.png");
    await image.loading();

    // Initialize height maps
    currentHeightMap = new Float32Array(width * height).fill(0);
    previousHeightMap = new Float32Array(width * height).fill(0);

    // Initialize the ripple source as a Lissajous curve
    ripple = new LissajousCurve({ a: 2, b: 3, width, height });
}

/**
 * Renders the water ripple effect.
 * 
 * Simulates the wave propagation using height maps and distorts the bitmap image based
 * on the height map values. Waves are initiated by a moving ripple source that follows
 * a Lissajous curve.
 * 
 * @param {Blitter} blitter - An instance of the Blitter class for canvas operations.
 * @param {number} elapsedTime - The total elapsed time since the effect started, in seconds.
 * @param {number} deltaTime - The time elapsed since the last frame, in seconds.
 */
export function render(blitter: Blitter, elapsedTime: number, deltaTime: number) {
    // Update ripple position
    const path = ripple.update(deltaTime, 0.3);

    // Add ripple at the current position
    const position: number = Math.floor(path.y) * width + Math.floor(path.x);
    if (position >= 0 && position < currentHeightMap.length) {
        currentHeightMap[position] += 100; // Add intensity to the ripple source
    }

    // Propagate ripples across the height map
    for (let y = 1; y < height - 1; y++) {
        const row: number = y * width;

        for (let x = 1; x < width - 1; x++) {
            const index: number = row + x;

            // Calculate the new height based on neighboring pixels
            const height: number =
                (
                    previousHeightMap[index - 1] +      // left neighbor
                    previousHeightMap[index + 1] +      // right neighbor
                    previousHeightMap[index - width] +  // top neighbor
                    previousHeightMap[index + width]    // bottom neighbor
                ) / 2 - currentHeightMap[index];

            // Apply damping to reduce the amplitude of the waves
            const damped: number = height * damping;

            // Clamp the height map values for stability
            currentHeightMap[index] = Math.max(-255, Math.min(255, damped));
        }
    }

    // Swap the current and previous height maps
    [currentHeightMap, previousHeightMap] = [previousHeightMap, currentHeightMap];

    // Distort the image based on the height map
    for (let y = 1; y < height - 1; y++) {
        const row: number = y * width;

        for (let x = 1; x < width - 1; x++) {
            const index: number = row + x;

            // Calculate distortion offsets using the height map
            const dx: number = currentHeightMap[index + 1] - currentHeightMap[index - 1];
            const dy: number = currentHeightMap[index + width] - currentHeightMap[index - width];

            // Apply distortion and wrap coordinates if necessary
            const u: number = Math.floor(x + dx) % image.width;
            const v: number = Math.floor(y + dy) % image.height;

            const wu: number = (u + image.width) % image.width;
            const wv: number = (v + image.height) % image.height;

            // Render the distorted image
            blitter.backbuffer[index] = image.data[wv * image.width + wu];
        }
    }
}